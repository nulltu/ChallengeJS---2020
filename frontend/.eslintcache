[{"C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\index.js":"1","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\App.js":"2","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\redux\\rootReducer.js":"4","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\pages\\Home.js":"5","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\pages\\Operations.js":"6","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\components\\Operation.js":"7","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\components\\Header.js":"8","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\components\\OperationModify.js":"9","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\components\\OperationDelete.js":"10","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\redux\\reducers\\operationReducer.js":"11","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\components\\Form.js":"12","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\components\\ListOperations.js":"13","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\redux\\actions\\operationsActions.js":"14","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\pages\\Login.js":"15","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\pages\\Signup.js":"16","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\redux\\reducers\\userReducer.js":"17","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\redux\\actions\\userActions.js":"18"},{"size":801,"mtime":1607720965804,"results":"19","hashOfConfig":"20"},{"size":1938,"mtime":1607770460739,"results":"21","hashOfConfig":"20"},{"size":375,"mtime":1607654569104,"results":"22","hashOfConfig":"20"},{"size":291,"mtime":1607672020761,"results":"23","hashOfConfig":"20"},{"size":3358,"mtime":1607689584200,"results":"24","hashOfConfig":"20"},{"size":371,"mtime":1607654569103,"results":"25","hashOfConfig":"20"},{"size":867,"mtime":1607655521409,"results":"26","hashOfConfig":"20"},{"size":1445,"mtime":1607769253057,"results":"27","hashOfConfig":"20"},{"size":4070,"mtime":1607720894509,"results":"28","hashOfConfig":"20"},{"size":793,"mtime":1607654569101,"results":"29","hashOfConfig":"20"},{"size":550,"mtime":1607654569104,"results":"30","hashOfConfig":"20"},{"size":3303,"mtime":1607654967810,"results":"31","hashOfConfig":"20"},{"size":2370,"mtime":1607654569101,"results":"32","hashOfConfig":"20"},{"size":1650,"mtime":1607655260905,"results":"33","hashOfConfig":"20"},{"size":2058,"mtime":1607770316752,"results":"34","hashOfConfig":"20"},{"size":1146,"mtime":1607762529108,"results":"35","hashOfConfig":"20"},{"size":732,"mtime":1607761447326,"results":"36","hashOfConfig":"20"},{"size":2050,"mtime":1607770191872,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"9ow19p",{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\index.js",[],["80","81"],"C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\App.js",["82"],"C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\redux\\rootReducer.js",[],"C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\pages\\Home.js",["83"],"import '../styles/home.css'\r\nimport { useEffect } from 'react'\r\nimport cool from '../assets/images/cool.svg'\r\nimport noCool from '../assets/images/no-cool.svg'\r\nimport neutral from '../assets/images/neutral.svg'\r\nimport { connect } from 'react-redux'\r\nimport operationsActions from '../redux/actions/operationsActions'\r\n\r\nfunction Home(props) {\r\n\r\n    useEffect(() => {\r\n        props.allOperations()\r\n    }, [])\r\n\r\n    //We shrink the array to a maximum of 10 elements.\r\n    const filterFirstTen = props.operations.slice(0, 10) \r\n\r\n   \r\n\r\n    let accumulatorNumberList = 1; //Index of table \r\n    let sumIngress = 0;\r\n    let sumEgress = 0;\r\n    if (props.operations === null) {\r\n        <p>Now Loading</p>\r\n    } else {\r\n\r\n        const totalIngress = props.operations.filter(operation => operation.type_operation === \"ingress\")\r\n             sumIngress = totalIngress.reduce((sum, value) => (sum + parseFloat(value.amount)), 0)\r\n\r\n        \r\n        const totalEgress = props.operations.filter(operation => operation.type_operation === \"egress\")\r\n        sumEgress = totalEgress.reduce((sum, value) => (sum + parseFloat(value.amount)), 0)\r\n        \r\n    }\r\n\r\n    const totalBalance = sumIngress - sumEgress;\r\n\r\n    return (\r\n\r\n        //Render Home\r\n        <div className=\"container__home\">\r\n            <div className=\"resulting\">\r\n                <div>\r\n                    {\r\n                        totalBalance > 0 ? <img src={cool} alt=\"\" />\r\n                            : totalBalance === 0 ? <img src={neutral} alt=\"\" />\r\n                                : <img src={noCool} alt=\"\" />\r\n                    }\r\n                    <div className=\"value__balance\">\r\n                        <p className=\"total__balance\">Total Balance:</p>\r\n                        <span>${totalBalance.toFixed(2)}</span>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <p className=\"ingress\">Total Ingress: ${sumIngress}</p>\r\n                    <p className=\"egress\">Total Egress: ${sumEgress}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"last__ten\">\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">Concept</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {filterFirstTen.map(operation => {\r\n                            return (\r\n                                <tr  key={operation.id}>\r\n                                    <th scope=\"row\">{accumulatorNumberList++}</th>\r\n                                    <td className={operation.type_operation === 'ingress' ? \"ingress\" : \"egress\"}>\r\n                                        {operation.concept}\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        operations: state.operations.listOperations\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    allOperations: operationsActions.allOperations\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)\r\n","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\pages\\Operations.js",[],"C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\components\\Operation.js",["84","85"],"import { Link } from 'react-router-dom'\r\nimport trash from '../assets/icons/delete.svg'\r\nimport edit from '../assets/icons/edit.svg'\r\n\r\nfunction Operation(props) {\r\n    return (\r\n        <tr  key={props.operation.id}>\r\n        <td>{props.operation.concept}</td>\r\n        <td>${props.operation.amount}</td>\r\n        <td>{props.operation.createdAt.slice(0,10)}</td>\r\n        <td className={props.operation.type_operation === 'ingress' ? \"ingress\" : \"egress\"}>\r\n            {props.operation.type_operation}\r\n        </td>\r\n        <td className=\"container__icons__operation\">\r\n            <Link className=\"remove\" to={`/operationDelete/${props.operation.id}`}><img src={trash}></img></Link>\r\n            <Link className=\"update\" to={`/operationModify/${props.operation.id}`}><img src={edit}></img></Link>\r\n        </td>\r\n    </tr>\r\n    )\r\n}\r\n\r\nexport default Operation\r\n","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\components\\Header.js",[],"C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\components\\OperationModify.js",["86","87"],"import { useState, useEffect } from 'react'\r\n// import '../styles/operationModify.css'\r\nimport { Link } from 'react-router-dom'\r\nimport swal from 'sweetalert';\r\nimport { connect } from 'react-redux'\r\nimport operationsActions from '../redux/actions/operationsActions'\r\n\r\nfunction OperationModify(props) {\r\n    //Status with current operation\r\n    const [operation, setOperation] = useState([])\r\n\r\n    //Status with the data to be modified.\r\n    const [updateOperation, setUpdateOperation] = useState({\r\n        concept: '', amount: '', date_operation: ''\r\n    })\r\n\r\n    useEffect(async () => {\r\n        //The component is mount and we bring the operation by id\r\n        const response = await props.getOperationById(idSearch)\r\n        //save in the state\r\n        setOperation(response)\r\n\r\n    }, [])\r\n\r\n    //I get the id of the operation\r\n    const idSearch = (props.match.params.id)\r\n\r\n    const readInput = e => {\r\n        const textBox = e.target.name\r\n        const value = e.target.value\r\n        setUpdateOperation({\r\n            ...updateOperation,\r\n            [textBox]: value\r\n        })\r\n    }\r\n\r\n    const sendInfo = async (e) => {\r\n        e.preventDefault()\r\n        //Send id and object for update\r\n        const response = await props.updateOperation(idSearch, updateOperation)\r\n        if (!response.code) {\r\n            props.history.push('/Operations')\r\n        } else {\r\n            swal({ title: 'Complete all fields please' })\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"container__modify\">\r\n            <form>\r\n                <div className=\"form-group\">\r\n                    <label>Concept</label>\r\n                    <input type=\"text\" className=\"form-control\" onChange={readInput} name=\"concept\"\r\n                        value={updateOperation.concept} placeholder={operation.concept} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Amount:</label>\r\n                    <input className=\"form-control\" type=\"number\" onChange={readInput} name=\"amount\"\r\n                        value={updateOperation.amount} placeholder={`$${operation.amount}`} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Date:</label>\r\n                    <input className=\"form-control\" type=\"date\" onChange={readInput} name=\"date_operation\"\r\n                        value={updateOperation.date_operation} />\r\n                </div>\r\n                <div>\r\n                    <div className=\"custom-control custom-radio custom-control-inline\">\r\n                        <input type=\"radio\" id=\"customRadioInline1\" name=\"type_operation\"\r\n                            className=\"custom-control-input\" onChange={readInput} value=\"ingress\" disabled />\r\n                        <label className=\"custom-control-label\" for=\"customRadioInline1\">Ingress</label>\r\n                    </div>\r\n                    <div className=\"custom-control custom-radio custom-control-inline\">\r\n                        <input type=\"radio\" id=\"customRadioInline2\" name=\"type_operation\"\r\n                            className=\"custom-control-input\" onChange={readInput} value=\"egress\" disabled />\r\n                        <label className=\"custom-control-label\" for=\"customRadioInline2\">Egress</label>\r\n                    </div>\r\n                </div>\r\n                <div className=\"modify__cancel\">\r\n                    <Link to=\"\">\r\n                        <button type=\"button\" className=\"btn btn-dark btn-sm\" onClick={sendInfo}>Modify</button>\r\n                    </Link>\r\n                    <Link to=\"/operations\">\r\n                        <button type=\"button\" className=\"btn btn-danger btn-sm\" >Cancel</button>\r\n                    </Link>\r\n                </div>\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Acctions in the component\r\nconst mapDispatchToProps = {\r\n    getOperationById: operationsActions.operationById,\r\n    updateOperation: operationsActions.updateOperation\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(OperationModify)\r\n","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\components\\OperationDelete.js",["88","89"],"import { useEffect } from 'react'\r\nimport '../styles/operationModify.css'\r\nimport swal from 'sweetalert';\r\nimport { connect } from 'react-redux'\r\nimport operationsActions from '../redux/actions/operationsActions'\r\n\r\nfunction OperationDelete(props) {\r\n\r\n    const idSearch = (props.match.params.id)\r\n    \r\n    useEffect(async () => {\r\n        const response = await props.deleteOperation(idSearch)\r\n        if (response.status === 200) {\r\n            props.history.push('/Operations')\r\n        }\r\n        swal({ title: ' The operation has been successfully removed!' })\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    deleteOperation: operationsActions.deleteOperation\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(OperationDelete)\r\n","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\redux\\reducers\\operationReducer.js",[],"C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\components\\Form.js",[],"C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\components\\ListOperations.js",["90"],"import React from 'react'\r\nimport { useEffect } from 'react'\r\nimport Operation from '../components/Operation'\r\nimport { connect } from 'react-redux'\r\nimport operationsActions from '../redux/actions/operationsActions'\r\n\r\nfunction ListOperations(props) {\r\n\r\n    useEffect(() => {\r\n        //we bring the data from redux\r\n        props.allOperations()\r\n    }, [])\r\n\r\n    //filter for type operation\r\n    const ingressOperation = props.operations.filter(operation => operation.type_operation === 'ingress')\r\n    const egressOperation = props.operations.filter(operation => operation.type_operation === 'egress')\r\n\r\n    return (\r\n        <div>\r\n            <table className=\"table table-bordered\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">Concept</th>\r\n                        <th scope=\"col\">$</th>\r\n                        <th scope=\"col\">Date</th>\r\n                        <th scope=\"col\">Type</th>\r\n                        <th scope=\"col\">Del/Mod</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {ingressOperation.map(operation => {\r\n                        return (\r\n                            <Operation operation={operation} />\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n\r\n            <table className=\"table table-bordered\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">Concept</th>\r\n                        <th scope=\"col\">$</th>\r\n                        <th scope=\"col\">Date</th>\r\n                        <th scope=\"col\">Type</th>\r\n                        <th scope=\"col\">Del/Mod</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n\r\n                    {egressOperation.map(operation => {\r\n                        return (\r\n                            <Operation operation={operation}/>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\n//access state to redux\r\nconst mapStateToProps = state => {\r\n    return {\r\n        operations: state.operations.listOperations\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    allOperations: operationsActions.allOperations\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListOperations)\r\n","C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\redux\\actions\\operationsActions.js",[],"C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\pages\\Login.js",["91"],"C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\pages\\Signup.js",["92"],"C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\redux\\reducers\\userReducer.js",[],"C:\\Users\\nulltu\\Desktop\\challenge js\\ChallengeJS---2020\\frontend\\src\\redux\\actions\\userActions.js",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":36,"column":11,"nodeType":"99","messageId":"100","endLine":36,"endColumn":17},{"ruleId":"101","severity":1,"message":"102","line":13,"column":8,"nodeType":"103","endLine":13,"endColumn":10,"suggestions":"104"},{"ruleId":"105","severity":1,"message":"106","line":15,"column":84,"nodeType":"107","endLine":15,"endColumn":101},{"ruleId":"105","severity":1,"message":"106","line":16,"column":84,"nodeType":"107","endLine":16,"endColumn":100},{"ruleId":"101","severity":1,"message":"108","line":17,"column":15,"nodeType":"109","endLine":23,"endColumn":6},{"ruleId":"101","severity":1,"message":"110","line":23,"column":8,"nodeType":"103","endLine":23,"endColumn":10,"suggestions":"111"},{"ruleId":"101","severity":1,"message":"108","line":11,"column":15,"nodeType":"109","endLine":17,"endColumn":6},{"ruleId":"101","severity":1,"message":"110","line":17,"column":8,"nodeType":"103","endLine":17,"endColumn":10,"suggestions":"112"},{"ruleId":"101","severity":1,"message":"102","line":12,"column":8,"nodeType":"103","endLine":12,"endColumn":10,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":12,"column":11,"nodeType":"99","messageId":"116","endLine":12,"endColumn":21},{"ruleId":"114","severity":1,"message":"117","line":23,"column":15,"nodeType":"99","messageId":"116","endLine":23,"endColumn":23},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"no-redeclare","'routes' is already defined.","Identifier","redeclared","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["120"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'idSearch' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["121"],["122"],["123"],"no-unused-vars","'inputStyle' is assigned a value but never used.","unusedVar","'response' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},{"desc":"126","fix":"128"},{"desc":"124","fix":"129"},"Update the dependencies array to be: [props]",{"range":"130","text":"131"},"Update the dependencies array to be: [idSearch, props]",{"range":"132","text":"133"},{"range":"134","text":"133"},{"range":"135","text":"131"},[409,411],"[props]",[796,798],"[idSearch, props]",[577,579],[357,359]]